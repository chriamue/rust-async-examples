@startuml
title Program, Process, Thread, and Task Structure

class Program {
    +Executable Code (on disk)
}

class Process {
    +Heap (shared)
    +Code Segment
    +Data Segment
    +Process ID
}

class Thread {
    +Thread ID
    +Program Counter (PC)
    +Stack
}

class Task {
    +Task ID
    +Task State
}

Program "1" -- "many" Process : loaded as >
Process "1" -- "many" Thread : contains >
Thread "1" -- "many" Task : executes >

Program : Executable Code : binary
Process : Heap : dynamic memory
Process : Code Segment : instructions
Process : Data Segment : global/static data
Process : Process ID : u32

Thread : Thread ID : u32
Thread : Stack : [local variables, return addresses]
Thread : Program Counter : address

Task : Task ID : u32
Task : Task State : Ready/Running/Waiting/Finished

note right of Program
A Program is an executable file on disk.
When started, it becomes a Process.
end note

note right of Process
A Process is an instance of a program in execution.
It has its own address space and resources.
Multiple threads can run in a process.
end note

note right of Thread
Each Thread has its own:
- Thread ID
- Stack (call stack)
- Program Counter

Threads in the same process
share the heap, code, and data segments.
end note

note right of Task
A Task is a unit of work executed by a thread.
In some systems, "task" and "thread" are synonyms.
In async runtimes, tasks are scheduled on threads.
end note

@enduml
